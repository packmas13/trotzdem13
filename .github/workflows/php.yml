name: PHPUnit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Cache NPM packages
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # - name: Install dependencies
      #   if: steps.composer-cache.outputs.cache-hit != 'true'
      #   run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run test suite
        run: make test

      - name: Set outputs
        id: vars
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +"%Y-%m-%d_%H-%M-%S")"

      - name: Generate Artifact
        if: github.ref == 'refs/heads/main'
        run: |
          tar czf /tmp/vendored.tar.gz \
            --exclude=node_modules \
            --exclude=storage \
            --exclude=.env \
            --exclude=.git \
            .

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.date }}_${{ steps.vars.outputs.sha_short }}
          release_name: Rolling release ${{ steps.vars.outputs.date }}_${{ steps.vars.outputs.sha_short }}
          draft: false
          prerelease: true

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/main'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/vendored.tar.gz
          asset_name: vendored.tar.gz
          asset_content_type: application/gzip

      - name: Deploy to trotzdem13.pfad.fr
        if: github.ref == 'refs/heads/main'
        run: |
          curl \
          --data "release=${{ steps.vars.outputs.date }}_${{ steps.vars.outputs.sha_short }}&token=${{ secrets.PFAD_FR_DEPLOY_TOKEN }}" \
          'https://dev.pfad.fr/trotzdem13.php'
